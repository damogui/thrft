/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MyCase {
  public interface Iface {
    int Test1(int num1, int num2, string num3);
    #if SILVERLIGHT
    IAsyncResult Begin_Test1(AsyncCallback callback, object state, int num1, int num2, string num3);
    int End_Test1(IAsyncResult asyncResult);
    #endif
    List<string> Test2(Dictionary<string, string> num1);
    #if SILVERLIGHT
    IAsyncResult Begin_Test2(AsyncCallback callback, object state, Dictionary<string, string> num1);
    List<string> End_Test2(IAsyncResult asyncResult);
    #endif
    void Test3();
    #if SILVERLIGHT
    IAsyncResult Begin_Test3(AsyncCallback callback, object state);
    void End_Test3(IAsyncResult asyncResult);
    #endif
    void Test4(List<Book> book);
    #if SILVERLIGHT
    IAsyncResult Begin_Test4(AsyncCallback callback, object state, List<Book> book);
    void End_Test4(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_Test1(AsyncCallback callback, object state, int num1, int num2, string num3)
    {
      return send_Test1(callback, state, num1, num2, num3);
    }

    public int End_Test1(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Test1();
    }

    #endif

    public int Test1(int num1, int num2, string num3)
    {
      #if !SILVERLIGHT
      send_Test1(num1, num2, num3);
      return recv_Test1();

      #else
      var asyncResult = Begin_Test1(null, null, num1, num2, num3);
      return End_Test1(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Test1(AsyncCallback callback, object state, int num1, int num2, string num3)
    #else
    public void send_Test1(int num1, int num2, string num3)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Test1", TMessageType.Call, seqid_));
      Test1_args args = new Test1_args();
      args.Num1 = num1;
      args.Num2 = num2;
      args.Num3 = num3;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_Test1()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Test1_result result = new Test1_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Test1 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Test2(AsyncCallback callback, object state, Dictionary<string, string> num1)
    {
      return send_Test2(callback, state, num1);
    }

    public List<string> End_Test2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Test2();
    }

    #endif

    public List<string> Test2(Dictionary<string, string> num1)
    {
      #if !SILVERLIGHT
      send_Test2(num1);
      return recv_Test2();

      #else
      var asyncResult = Begin_Test2(null, null, num1);
      return End_Test2(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Test2(AsyncCallback callback, object state, Dictionary<string, string> num1)
    #else
    public void send_Test2(Dictionary<string, string> num1)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Test2", TMessageType.Call, seqid_));
      Test2_args args = new Test2_args();
      args.Num1 = num1;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_Test2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Test2_result result = new Test2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Test2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Test3(AsyncCallback callback, object state)
    {
      return send_Test3(callback, state);
    }

    public void End_Test3(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_Test3();
    }

    #endif

    public void Test3()
    {
      #if !SILVERLIGHT
      send_Test3();
      recv_Test3();

      #else
      var asyncResult = Begin_Test3(null, null);
      End_Test3(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Test3(AsyncCallback callback, object state)
    #else
    public void send_Test3()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Test3", TMessageType.Call, seqid_));
      Test3_args args = new Test3_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_Test3()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Test3_result result = new Test3_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_Test4(AsyncCallback callback, object state, List<Book> book)
    {
      return send_Test4(callback, state, book);
    }

    public void End_Test4(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_Test4();
    }

    #endif

    public void Test4(List<Book> book)
    {
      #if !SILVERLIGHT
      send_Test4(book);
      recv_Test4();

      #else
      var asyncResult = Begin_Test4(null, null, book);
      End_Test4(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Test4(AsyncCallback callback, object state, List<Book> book)
    #else
    public void send_Test4(List<Book> book)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("Test4", TMessageType.Call, seqid_));
      Test4_args args = new Test4_args();
      args.Book = book;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_Test4()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Test4_result result = new Test4_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["Test1"] = Test1_Process;
      processMap_["Test2"] = Test2_Process;
      processMap_["Test3"] = Test3_Process;
      processMap_["Test4"] = Test4_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void Test1_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Test1_args args = new Test1_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Test1_result result = new Test1_result();
      result.Success = iface_.Test1(args.Num1, args.Num2, args.Num3);
      oprot.WriteMessageBegin(new TMessage("Test1", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Test2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Test2_args args = new Test2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Test2_result result = new Test2_result();
      result.Success = iface_.Test2(args.Num1);
      oprot.WriteMessageBegin(new TMessage("Test2", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Test3_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Test3_args args = new Test3_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Test3_result result = new Test3_result();
      iface_.Test3();
      oprot.WriteMessageBegin(new TMessage("Test3", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void Test4_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Test4_args args = new Test4_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Test4_result result = new Test4_result();
      iface_.Test4(args.Book);
      oprot.WriteMessageBegin(new TMessage("Test4", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test1_args : TBase
  {
    private int _num1;
    private int _num2;
    private string _num3;

    public int Num1
    {
      get
      {
        return _num1;
      }
      set
      {
        __isset.num1 = true;
        this._num1 = value;
      }
    }

    public int Num2
    {
      get
      {
        return _num2;
      }
      set
      {
        __isset.num2 = true;
        this._num2 = value;
      }
    }

    public string Num3
    {
      get
      {
        return _num3;
      }
      set
      {
        __isset.num3 = true;
        this._num3 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num1;
      public bool num2;
      public bool num3;
    }

    public Test1_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Num1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Num2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Num3 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test1_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.num1) {
        field.Name = "num1";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num1);
        oprot.WriteFieldEnd();
      }
      if (__isset.num2) {
        field.Name = "num2";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num2);
        oprot.WriteFieldEnd();
      }
      if (Num3 != null && __isset.num3) {
        field.Name = "num3";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Num3);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test1_args(");
      sb.Append("Num1: ");
      sb.Append(Num1);
      sb.Append(",Num2: ");
      sb.Append(Num2);
      sb.Append(",Num3: ");
      sb.Append(Num3);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test1_result : TBase
  {
    private int _success;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Test1_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test1_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test1_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test2_args : TBase
  {
    private Dictionary<string, string> _num1;

    public Dictionary<string, string> Num1
    {
      get
      {
        return _num1;
      }
      set
      {
        __isset.num1 = true;
        this._num1 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num1;
    }

    public Test2_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Num1 = new Dictionary<string, string>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  string _val8;
                  _key7 = iprot.ReadString();
                  _val8 = iprot.ReadString();
                  Num1[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test2_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Num1 != null && __isset.num1) {
        field.Name = "num1";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Num1.Count));
          foreach (string _iter9 in Num1.Keys)
          {
            oprot.WriteString(_iter9);
            oprot.WriteString(Num1[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test2_args(");
      sb.Append("Num1: ");
      sb.Append(Num1);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test2_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Test2_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  string _elem12 = null;
                  _elem12 = iprot.ReadString();
                  Success.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test2_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter13 in Success)
            {
              oprot.WriteString(_iter13);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test2_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test3_args : TBase
  {

    public Test3_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test3_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test3_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test3_result : TBase
  {

    public Test3_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test3_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test3_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test4_args : TBase
  {
    private List<Book> _book;

    public List<Book> Book
    {
      get
      {
        return _book;
      }
      set
      {
        __isset.book = true;
        this._book = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool book;
    }

    public Test4_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Book = new List<Book>();
                TList _list14 = iprot.ReadListBegin();
                for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                {
                  Book _elem16 = new Book();
                  _elem16 = new Book();
                  _elem16.Read(iprot);
                  Book.Add(_elem16);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test4_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Book != null && __isset.book) {
        field.Name = "book";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Book.Count));
          foreach (Book _iter17 in Book)
          {
            _iter17.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test4_args(");
      sb.Append("Book: ");
      sb.Append(Book);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Test4_result : TBase
  {

    public Test4_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Test4_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Test4_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
